generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status   @default(ACTIVE)
  type      UserType @default(USER)

  ComunicationDescription ComunicationDescription[]
}

model DeviceStatus {
  deviceStatusId Int    @id @default(autoincrement())
  description    String

  ibutton IButton[]
  tracker Tracker[]
}

model IButton {
  ibuttonId       Int     @id @default(autoincrement())
  number          String
  code            String
  programmedField String
  comments        String?

  deviceStatus   DeviceStatus @relation(fields: [deviceStatusId], references: [deviceStatusId])
  deviceStatusId Int          @default(1)

  driverIButton DriverIButton[]
}

model Tracker {
  trackerId    Int    @id @default(autoincrement())
  number       String
  model        String
  chipOperator String
  iccid        String
  output       String
  comments     String

  deviceStatus   DeviceStatus @relation(fields: [deviceStatusId], references: [deviceStatusId])
  deviceStatusId Int          @default(1)

  vehicleTracker VehicleTracker[]
}

model Fleet {
  fleetId     Int    @id @default(autoincrement())
  name        String
  responsible String
  telephone   String
  email       String
  color       String
  status      Status @default(ACTIVE)

  driver  Driver[]
  vehicle Vehicle[]
}

model Driver {
  driverId Int    @id @default(autoincrement())
  name     String
  cpf      String @unique
  cnh      String
  comments String
  status   Status @default(ACTIVE)

  fleet   Fleet @relation(fields: [fleetId], references: [fleetId])
  fleetId Int

  driverIButton DriverIButton[]
}

model Vehicle {
  vehicleId        Int      @id @default(autoincrement())
  model            String
  licensePlate     String   @unique
  code             String
  renavam          String
  chassis          String
  year             String
  installationDate DateTime
  comments         String
  status           Status   @default(ACTIVE)

  fleet   Fleet @relation(fields: [fleetId], references: [fleetId])
  fleetId Int

  vehicleTracker      VehicleTracker[]
  comunicationProblem ComunicationProblem[]
}

model ComunicationProblem {
  comunicationProblemId Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  status                Status   @default(ACTIVE)

  vehicle   Vehicle @relation(fields: [vehicleId], references: [vehicleId], onDelete: Cascade)
  vehicleId Int

  comunicationDescription ComunicationDescription[]
}

model ComunicationDescription {
  comunicationDescriptionId Int      @id @default(autoincrement())
  date                      DateTime
  description               String

  user   User @relation(fields: [userId], references: [userId])
  userId Int

  comunicationProblem   ComunicationProblem @relation(fields: [comunicationProblemId], references: [comunicationProblemId], onDelete: Cascade)
  comunicationProblemId Int
}

model DriverIButton {
  driverIButtonId Int       @id @default(autoincrement())
  status          Status    @default(ACTIVE)
  startDate       DateTime  @default(now())
  endDate         DateTime? @db.Timestamp(0)
  comments        String

  driver   Driver @relation(fields: [driverId], references: [driverId])
  driverId Int

  ibutton   IButton @relation(fields: [ibuttonId], references: [ibuttonId])
  ibuttonId Int
}

model VehicleTracker {
  vehicleTrackerId Int       @id @default(autoincrement())
  status           Status    @default(ACTIVE)
  startDate        DateTime  @default(now())
  endDate          DateTime? @db.Timestamp(0)
  comments         String

  vehicle   Vehicle @relation(fields: [vehicleId], references: [vehicleId])
  vehicleId Int

  tracker   Tracker @relation(fields: [trackerId], references: [trackerId])
  trackerId Int
}

enum Status {
  ACTIVE
  INACTIVE
}

enum UserType {
  USER
  ADMIN
}
